// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package logbook.client.managed.ui;

import com.google.gwt.core.client.GWT;
import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.i18n.client.NumberFormat;
import com.google.gwt.text.client.DateTimeFormatRenderer;
import com.google.gwt.text.shared.AbstractRenderer;
import com.google.gwt.text.shared.Renderer;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.cellview.client.CellTable;
import com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy.KeyboardSelectionPolicy;
import com.google.gwt.user.cellview.client.TextColumn;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.HTMLPanel;
import java.util.HashSet;
import java.util.Set;
import logbook.client.managed.proxy.SkillAcquiredProxy;
import logbook.client.managed.proxy.StudentProxy;
import logbook.client.scaffold.place.AbstractProxyListView;
import logbook.shared.Gender;
import logbook.shared.StudentStatus;
import logbook.shared.StudyYears;

public abstract class StudentListView_Roo_Gwt extends AbstractProxyListView<StudentProxy> {

    @UiField
    CellTable<StudentProxy> table;

    protected Set<String> paths = new HashSet<String>();

    public void init() {
        paths.add("id");
        table.addColumn(new TextColumn<StudentProxy>() {

            Renderer<java.lang.Long> renderer = new AbstractRenderer<java.lang.Long>() {

                public String render(java.lang.Long obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(StudentProxy object) {
                return renderer.render(object.getId());
            }
        }, "Id");
        paths.add("studentId");
        table.addColumn(new TextColumn<StudentProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(StudentProxy object) {
                return renderer.render(object.getStudentId());
            }
        }, "Student Id");
        paths.add("shib_id");
        table.addColumn(new TextColumn<StudentProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(StudentProxy object) {
                return renderer.render(object.getShib_id());
            }
        }, "Shib_id");
        paths.add("email");
        table.addColumn(new TextColumn<StudentProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(StudentProxy object) {
                return renderer.render(object.getEmail());
            }
        }, "Email");
        paths.add("gender");
        table.addColumn(new TextColumn<StudentProxy>() {

            Renderer<logbook.shared.Gender> renderer = new AbstractRenderer<logbook.shared.Gender>() {

                public String render(logbook.shared.Gender obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(StudentProxy object) {
                return renderer.render(object.getGender());
            }
        }, "Gender");
        paths.add("name");
        table.addColumn(new TextColumn<StudentProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(StudentProxy object) {
                return renderer.render(object.getName());
            }
        }, "Name");
        paths.add("preName");
        table.addColumn(new TextColumn<StudentProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(StudentProxy object) {
                return renderer.render(object.getPreName());
            }
        }, "Pre Name");
        paths.add("studentStatus");
        table.addColumn(new TextColumn<StudentProxy>() {

            Renderer<logbook.shared.StudentStatus> renderer = new AbstractRenderer<logbook.shared.StudentStatus>() {

                public String render(logbook.shared.StudentStatus obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(StudentProxy object) {
                return renderer.render(object.getStudentStatus());
            }
        }, "Student Status");
        paths.add("studyYear");
        table.addColumn(new TextColumn<StudentProxy>() {

            Renderer<logbook.shared.StudyYears> renderer = new AbstractRenderer<logbook.shared.StudyYears>() {

                public String render(logbook.shared.StudyYears obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(StudentProxy object) {
                return renderer.render(object.getStudyYear());
            }
        }, "Study Year");
        paths.add("skillAcquired");
        table.addColumn(new TextColumn<StudentProxy>() {

            Renderer<java.util.Set> renderer = logbook.client.scaffold.place.CollectionRenderer.of(logbook.client.managed.ui.SkillAcquiredProxyRenderer.instance());

            @Override
            public String getValue(StudentProxy object) {
                return renderer.render(object.getSkillAcquired());
            }
        }, "Skill Acquired");
        paths.add("version");
        table.addColumn(new TextColumn<StudentProxy>() {

            Renderer<java.lang.Integer> renderer = new AbstractRenderer<java.lang.Integer>() {

                public String render(java.lang.Integer obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(StudentProxy object) {
                return renderer.render(object.getVersion());
            }
        }, "Version");
    }
}
